<!--
  ~ Kingsrook IntelliJ Commentator Plugin
  ~ Copyright (C) 2022.  Kingsrook, LLC
  ~ 651 N Broad St Ste 205 # 6917 | Middletown DE 19709 | United States
  ~ contact@kingsrook.com
  ~ https://github.com/Kingsrook/intellij-commentator-plugin
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU Affero General Public License as
  ~ published by the Free Software Foundation, either version 3 of the
  ~ License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License
  ~ along with this program.  If not, see <https://www.gnu.org/licenses/>.
  -->

<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
   <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
   <id>com.kingsrook.intellij-commentator-plugin</id>

   <version>1.5.0</version>

   <!-- Public plugin name should be written in Title Case.
        Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
   <name>Kingsrook Commentator</name>

   <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
   <vendor email="contact@kingsrook.com" url="https://www.kingsrook.com">Kingsrook</vendor>

   <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
        Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
        Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
   <description><![CDATA[
    <h2>Overview</h2>
    <p>The <b>Kingsrook Commentator</b> is a plugin to provide code editing tools desired by the Kingsrook development team.</p>
    <p>Specifically:</p>
    <ul>
      <li>Single-button to create a flower box comment.</li>
      <li>Smart-case substitutions (e.g., MyVar myVar s/my/your/ = YourVar yourVar).</li>
      <li>Write missing get/set/with methods for fields.</li>
      <li>Quickly do a URI decode on selected text.</li>
      <li>Auto-Import classes or methods that IntelliJ refuses to "just do".</li>
      <li>Auto-line-re-wrapping for flower box comments.</li>
      <li>Class/Method headers.</li>
    </ul>
    <p>Future plans may include:</p>
    <ul>
      <li>Conversion of words from say this_case or this-case to thisCase or ThisCase or THIS_CASE, etc</li>
    </ul>
    <h2>Usage</h2>

    <h3>Single-button to create a flower box comment</h3>
    <p>The Kingsrook coding standard requires full Flower Box comments for all inline source documentation.  However,
    these can be quite painful to "draw" by-hand.  As such, the Commentator plugin provides a single button that
    can be pressed (that is, via keyboard shortcut or menu option) to convert one or more lines of text to a properly
    formatted Flower Box comment, like this:</p>
    <pre>
    //////////////////////////////////////////////////////////
    // This is a beautiful example of a flower box comment! //
    //////////////////////////////////////////////////////////
    </pre>
    <p>In addition, if you edit a comment (adding or removing words, even adding lines), you can reformat your Flower
    Box with the same action.</p>
    <p>To use this action to create (or update) a Flower Box comment:</p>
    <ul>
      <li>Place your cursor within a line of text that you want to convert into a flower box.  You can have existing
      comment characters already in the line (e.g., it's common to write the line with a leading <code>//</code>, to
      prevent the line from being falsely-flagged as a syntax error).  Alternatively, you can select (portions) of one
      or more lines, if you are making a multi-line comment.</li>
      <li>To trigger the action, just hit its hotkey / keyboard shortcut.  By default, this is <b>F6</b> (but of course you can
      customize that under Preferences, Keymap).</li>
      <li>Alternatively, you can select it from the <b>Code</b> menu:  <b>Create Flower Box Comment</b></li>
    </ul>
    <p><i>Note that, at this time, only <code>/</code> (slash) is supported as a comment character.  Future versions of
    this plugin may include language-specific comment characters, and/or preferences to customize the character used.</i></p>

    <h3>Smart-case substitutions (e.g., MyVar myVar s/my/your/ = YourVar yourVar).</h3>
    <p>A super-common use case (for me, at least) is to want to substitute one word for another, in a camel-case sensitive
    manner, such that occurrences of the word that start with either an upper or
    lowercase letter get replaced by the replacement, preserving the case of the initial letter.  (I use the word "substitute"
    as a reference to VI's <code>:s</code> command, though I suppose Find and Replace is the more common GUI terminology for
    the concept...)</p>
    <p>The most common example of this in Java development, is in copying & pasting getter & setter methods (and these days,
    we tend to also write fluent setters (e.g., <code>withVar</code>)).</p>
    <p>For example, if you have these methods:<p>
    <pre>public String getCity()
{
   return(city);
}

public void setCity(String city)
{
   this.city = city;
}

public Address withCity(String city)
{
   this.city = city;
   return (this);
}
   </pre>
   <p>And you want to copy & paste them for a new field, <code>state</code>.  By using <b>SmartSubstitute</b>, your steps to do this
    would be:</p>
    <ul>
    <li>copy the code</li>
    <li>paste it</li>
    <li>select the pasted code</li>
    <li>open <b>SmartSubstitute</b> (from the Edit â†’ Find menu)</li>
    <li>tell it to replace <u>city</u> with <u>state</u></li>
    </ul>
    <p>The result you'll get is, in the selected code, both the literal values you entered for find and replace will be substituted
    (e.g., "city" for "state", for the variable and field names, that start with lower case letters), and also, automatically
    <u>City</u> will be replaced with <u>State</u> (e.g., in the method names, for the inner word starting with an upper case letter)
    - just like you would have wanted!</p>

    <h3>GetSetWith method generation</h3>
    <p>If you add new fields to a class - you can quickly & easily generate getter, setter, and fluent-setter ("wither") methods,
    by selecting the lines with the fields, and invoking the <b>GetSetWith</b> command.  It attempts to be smart and not re-generate
    any that already exist.  Note, it doesn't quite work well for inner-classes.</p>
  ]]></description>

   <!-- Product and plugin compatibility requirements.
        Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
   <depends>com.intellij.modules.platform</depends>
   <depends>com.intellij.modules.java</depends>

   <idea-version since-build="222.3345.118"/>

   <!-- Extension points defined by the plugin.
        Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
   <extensions defaultExtensionNs="com.intellij">
      <notificationGroup id="Kingsrook Commentator Notifications" displayType="BALLOON"/>
   </extensions>

   <extensions defaultExtensionNs="com.intellij">
      <applicationService serviceImplementation="com.kingsrook.intellijcommentatorplugin.settings.CommentatorSettingsState"/>
   </extensions>

   <extensions defaultExtensionNs="com.intellij">
      <applicationConfigurable
            parentId="tools"
            instance="com.kingsrook.intellijcommentatorplugin.settings.CommentatorSettingsConfigurable"
            id="org.intellij.sdk.settings.AppSettingsConfigurable"
            displayName="Kingsrook Commentator"/>
   </extensions>

   <actions>
      <group id="com.kingsrook.intellijcommentatorplugin.KingsrookCommentatorGroup" text="Kingsrook Commentator" popup="true" icon="/META-INF/pluginMenuIcon.svg">
         <add-to-group group-id="ToolsMenu" anchor="last"/>
         <action id="com.kingsrook.intellijcommentatorplugin.CreateBoxCommentAction" class="com.kingsrook.intellijcommentatorplugin.CreateBoxCommentAction" text="Create Flower Box Comment" description="Creates a Box Comment (Flowerbox) out of the current line">
            <keyboard-shortcut keymap="$default" first-keystroke="F6"/>
         </action>
         <action id="com.kingsrook.intellijcommentatorplugin.WrapCommentAction" class="com.kingsrook.intellijcommentatorplugin.WrapCommentAction" text="Wrap Flower Box Comment" description="Wrap a Box Comment (Flowerbox) that got too long">
            <keyboard-shortcut keymap="$default" first-keystroke="ctrl F5"/>
         </action>
         <action id="com.kingsrook.intellijcommentatorplugin.HeaderCommentAction" class="com.kingsrook.intellijcommentatorplugin.HeaderCommentAction" text="Write Header Comment" description="Write a stub of a method/class/etc header comment">
            <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt m"/>
         </action>
         <action id="com.kingsrook.intellijcommentatorplugin.CaseChangerAction" class="com.kingsrook.intellijcommentatorplugin.CaseChangerAction" text="Case Changer" description="Change the capitalization style of the word under the cursor">
            <keyboard-shortcut keymap="$default" first-keystroke="alt C"/>
         </action>
         <action id="com.kingsrook.intellijcommentatorplugin.SSAction" class="com.kingsrook.intellijcommentatorplugin.SSAction" text="SS - SmartSubstitution" description="Substitution action that is Smart w/r/t capitalization">
            <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt S"/>
         </action>
         <action id="com.kingsrook.intellijcommentatorplugin.GetSetWithAction" class="com.kingsrook.intellijcommentatorplugin.GetSetWithAction" text="Get, Set, With" description="Write getX, setX, withX methods">
            <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt w"/>
         </action>
         <action id="com.kingsrook.intellijcommentatorplugin.MyImporterAction" class="com.kingsrook.intellijcommentatorplugin.MyImporterAction" text="My Importer" description="Import things the way I want you to.">
            <keyboard-shortcut keymap="$default" first-keystroke="ctrl alt i"/>
         </action>
         <action id="com.kingsrook.intellijcommentatorplugin.URIDecodeAction" class="com.kingsrook.intellijcommentatorplugin.URIDecodeAction" text="URI Decode" description="Do a URI Decode on the selected text.">
         </action>
         <action id="com.kingsrook.intellijcommentatorplugin.StubSetterCallsAction" class="com.kingsrook.intellijcommentatorplugin.StubSetterCallsAction" text="Stub Setter Calls" description="Write a stub of calls to all setters on an object">
         </action>
      </group>
   </actions>
</idea-plugin>